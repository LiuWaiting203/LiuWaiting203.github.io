{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hello, Subarashii Seikai!",
    "description": "Front-end Developer, Web Designer, UI/UX Designer",
    "home_page_url": "https://liuwaiting203.github.io",
    "items": [
        {
            "id": "https://liuwaiting203.github.io/Life/life/2024-06-02/",
            "url": "https://liuwaiting203.github.io/Life/life/2024-06-02/",
            "title": "生活日記",
            "date_published": "2024-06-01T17:54:26.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>",
            "tags": [
                "Dairy"
            ]
        },
        {
            "id": "https://liuwaiting203.github.io/back-end/back-end/2024-06-02/",
            "url": "https://liuwaiting203.github.io/back-end/back-end/2024-06-02/",
            "title": "back end",
            "date_published": "2024-06-01T17:40:27.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>",
            "tags": [
                "Back-end"
            ]
        },
        {
            "id": "https://liuwaiting203.github.io/front-end/front-end/2024-06-02/",
            "url": "https://liuwaiting203.github.io/front-end/front-end/2024-06-02/",
            "title": "front end",
            "date_published": "2024-06-01T17:39:28.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>",
            "tags": [
                "Front-end"
            ]
        },
        {
            "id": "https://liuwaiting203.github.io/Misc/Hexo/Start/2024-05-25/",
            "url": "https://liuwaiting203.github.io/Misc/Hexo/Start/2024-05-25/",
            "title": "【自學歷程】用 Hexo + Github Pages 架設個人網誌",
            "date_published": "2024-05-25T07:35:33.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><div class=\"note default\">\n<p>可以點擊網頁左下角的音樂按鈕聆聽背景音</p>\n</div>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 💡前言</h1>\n<h2 id=\"在開始之前先介紹一下-hexo-是什麼而為什麼使用它\"><a class=\"anchor\" href=\"#在開始之前先介紹一下-hexo-是什麼而為什麼使用它\">#</a> 在開始之前，先介紹一下 Hexo 是什麼，而為什麼使用它。</h2>\n<p>此篇文章主要內容有以下部分：</p>\n<ul>\n<li>Hexo 是什麼？</li>\n<li>前置作業</li>\n<li>常用指令</li>\n<li>部屬至 Github</li>\n<li>總結</li>\n</ul>\n<h1 id=\"hexo-是什麼\"><a class=\"anchor\" href=\"#hexo-是什麼\">#</a> ❓Hexo 是什麼？</h1>\n<blockquote>\n<p>引用 <a href=\"https://github.com/hexojs/hexo\">官方 Github</a> 的介紹：</p>\n<blockquote>\n<p>A fast, simple &amp; powerful blog framework, powered by <a href=\"https://nodejs.org/en\">Node.js</a>.</p>\n</blockquote>\n</blockquote>\n<p>Hexo 是一個靜態網頁產生工具，也可以說它是 Blog 的一種，相較於動態網頁來說，動態網頁往往需要搭配一個資料庫來運行，以 <ins><strong>Word Press</strong></ins> 來說，<ins><strong>Word Press</strong></ins> 即屬於動態網頁。</p>\n<p>而 Hexo 是基於 Node.js 所製作的網誌框架，擁有以下幾項特點：</p>\n<ul>\n<li>編譯速度很快，幾百篇的文章只需要短短幾秒鐘即可完成\n<ul>\n<li>不過也會受到主題以及外掛套件的關係，速度加減會受到影響😅</li>\n</ul>\n</li>\n<li>外掛套件相當多，而且很豐富</li>\n<li>很多好看的主題，讓讀者與創作者賞心悅目。\n<ul>\n<li>本網誌是用 <a href=\"https://github.com/theme-shoka-x/hexo-theme-shokaX\">ShokaX</a> 的主題。</li>\n</ul>\n</li>\n<li>支援 <ins>MarkDown</ins> 格式語法撰寫\n<ul>\n<li>對於喜歡用 <ins>MarkDown</ins> 格式語法的人，用 Hexo 來撰寫文章是非常快樂且快速的一件事！</li>\n<li>當然如果想要用  <code>Html</code>  也是可以的，只需要把檔名  <code>.md</code>  改成  <code>.html</code>  即可。</li>\n</ul>\n</li>\n<li>支援一鍵部屬至 <ins>Github Page</ins> 或 <ins>Heroku</ins> 等靜態網頁的空間\n<ul>\n<li>如果是用 <ins>Github</ins> 來當作網誌空間的，基本上就是零成本架設！</li>\n</ul>\n</li>\n<li>中文資源繁多！不怕沒文檔或教學可看！\n<ul>\n<li>其實只要 Google 一下 <ins>Hexo + Github Page 教學</ins> 或者是 <ins>Hexo 教學</ins> 就有很多的資源及文章可供參考了。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"前置作業\"><a class=\"anchor\" href=\"#前置作業\">#</a> 📖 前置作業</h1>\n<div class=\"note warning\">\n<p>在開始安裝之前，必須要先建立開發環境...</p>\n</div>\n<h2 id=\"安裝需求\"><a class=\"anchor\" href=\"#安裝需求\">#</a> 安裝需求</h2>\n<p>必須要安裝以下工具：</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\">Node.js</a> : 提供 npm 來安裝其套。請下載 LTS 版本。</li>\n</ul>\n<blockquote>\n<p>Hexo 建議使用 Node.js 10.0 以上的版本，若不確定下載到哪個版本，在終端機輸入  <code>node -v</code>  檢查版本號。</p>\n</blockquote>\n<ul>\n<li><a href=\"https://git-scm.com/\">Git</a> : 將檔案發佈到 Github Pages 上，也可使用 <a href=\"https://desktop.github.com/\">Github Desktop</a> 來進行發布。</li>\n</ul>\n<blockquote>\n<p>Git 的基礎語法大致如下：</p>\n<blockquote>\n<ol>\n<li><code>git clone</code>  : 將遠端儲存庫複製下載到本機上。</li>\n<li><code>git push -u (origin) (master)</code>  : 發佈至遠端並推送。</li>\n</ol>\n</blockquote>\n</blockquote>\n<h2 id=\"hexo-環境設置\"><a class=\"anchor\" href=\"#hexo-環境設置\">#</a> Hexo 環境設置</h2>\n<p>完成前置作業後，緊接著要建立 Hexo 的環境，其步驟如下：</p>\n<h3 id=\"step-1-安裝-hexo\"><a class=\"anchor\" href=\"#step-1-安裝-hexo\">#</a> Step 1 : 安裝 Hexo</h3>\n<p>開啟 CLI 介面（例如 cmd、git-bash、PowerShell ... 等終端機），並輸入以下指令來安裝 Hexo：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><p>安裝後，可以利用  <code>hexo -v</code>  檢查是否安裝成功，並檢查 Hexo 目前版本號。</p>\n<h3 id=\"step-2-初始化-hexo\"><a class=\"anchor\" href=\"#step-2-初始化-hexo\">#</a> Step 2 : 初始化 Hexo</h3>\n<p>再接著，要初始化 Hexo，可以用兩種做法：</p>\n<ol>\n<li>直接輸入指令，會自動於所在目錄裡建立一個新資料夾來操作 Hexo。記得要將括號內的名稱修改成資料夾的名稱，若不指定則會直接初始化當前目錄。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init <span class=\"token operator\">&lt;</span>資料夾名稱<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>也可先建立好資料夾，使用終端機指令切換資料夾目錄，之後再進行初始化。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>資料夾名稱 or 資料夾路徑<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"step-3-在資料夾內安裝所需檔案\"><a class=\"anchor\" href=\"#step-3-在資料夾內安裝所需檔案\">#</a> Step 3 : 在資料夾內安裝所需檔案</h3>\n<p>確認 CLI 上的路徑是在目前資料夾中，確認完畢後執行以下指令，安裝所需 npm 套件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>安裝完成後，會看見目錄裡出現以下檔案及資料夾：</p>\n<pre><code>.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n</code></pre>\n<h4 id=\"_configyml\"><a class=\"anchor\" href=\"#_configyml\">#</a> _config.yml</h4>\n<ul>\n<li>有關網站配置的設定檔案，可修改各式各樣的設定，例如：網站標題、網站網址、使用主題等等...</li>\n<li>更多內容請查詢<a href=\"https://hexo.io/zh-tw/docs/configuration\">官方文檔</a></li>\n</ul>\n<h4 id=\"packagejson\"><a class=\"anchor\" href=\"#packagejson\">#</a> package.json</h4>\n<p>記錄所有應用程式的資料，其專案裡所有的模組</p>\n<h4 id=\"scaffolds-模板\"><a class=\"anchor\" href=\"#scaffolds-模板\">#</a> scaffolds 模板</h4>\n<ul>\n<li>當建立新文章時，Hexo 會根據 scaffolds 中的模板建立相對應的檔案</li>\n</ul>\n<h4 id=\"themes-主題\"><a class=\"anchor\" href=\"#themes-主題\">#</a> themes 主題</h4>\n<ul>\n<li>用來存放主題的資料夾</li>\n<li>Hexo 會根據主題來解析 source 資料夾中的檔案並產成靜態頁面，預設主題為 <a href=\"https://github.com/hexojs/hexo-theme-landscape\">landscape</a>，順帶一提本人目前是使用 <a href=\"https://github.com/theme-shoka-x/hexo-theme-shokaX\">ShokaX</a></li>\n</ul>\n<h4 id=\"source-資源\"><a class=\"anchor\" href=\"#source-資源\">#</a> source 資源</h4>\n<ul>\n<li>存放原始檔，例如  <code>.md</code>  檔、圖片、各類頁面（關於我、分類、標籤等...）</li>\n<li>通常資料夾命名會加上  <code>_</code>  底線，例如： <code>_imgs</code></li>\n<li>以  <code>_</code>  開頭的檔案、資料夾會被忽略，除了  <code>_posts</code>  外</li>\n<li><code>.md</code>  及  <code>.html</code>  會被解析，並存儲在  <code>public</code>  內，而其他檔案會被拷貝過去</li>\n</ul>\n<h4 id=\"source-public-deploy_git-的差別\"><a class=\"anchor\" href=\"#source-public-deploy_git-的差別\">#</a> source &amp; public &amp; .deploy_git 的差別</h4>\n<ul>\n<li>執行  <code>$ hexo generate</code>  後，將  <code>source</code>  資料夾內的  <code>.md</code>  和  <code>.html</code>  進行解析，再配合主題進行渲染，生成靜態網站</li>\n<li>執行  <code>$ hexo deploy</code>  後，則會將  <code>public</code>  內的資料夾部屬到 Github 上，並生成  <code>.deploy_git</code>  資料夾，內容與  <code>public</code>  幾乎相同</li>\n<li>大致上是這樣的排序：  <code>source &gt; public &gt; .deploy_git</code></li>\n</ul>\n<h1 id=\"常用指令\"><a class=\"anchor\" href=\"#常用指令\">#</a> 🔧常用指令</h1>\n<p>在 Hexo 中，時常會用到以下指令，更多詳細指令請參考<a href=\"https://hexo.io/zh-tw/docs/commands\">官方文檔</a></p>\n<h2 id=\"new-新增文章\"><a class=\"anchor\" href=\"#new-新增文章\">#</a> new 新增文章</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo new <span class=\"token punctuation\">[</span>layout<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>若沒有設定 layout，則會使用  <code>_config.yml</code>  中的 default_layout 來設定</li>\n<li>若標題中含有空格，需使用括號保住，例如  <code>&quot;title&quot;</code></li>\n<li>檔案名稱盡量使用英文命名，避免出現亂碼</li>\n</ul>\n<p>執行完成後，會在  <code>/source/_posts/</code>  中出現  <code>.md</code>  檔，即可在  <code>.md</code>  內進行編輯文案</p>\n<blockquote>\n<p>若對 MarkDown 語法不熟則可參考此筆記 : <a href=\"https://ed521.github.io/2019/08/hexo-markdown/\">MarkDown 格式</a></p>\n</blockquote>\n<h2 id=\"clean-清除靜態檔案與快取\"><a class=\"anchor\" href=\"#clean-清除靜態檔案與快取\">#</a> clean 清除靜態檔案與快取</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean</pre></td></tr></table></figure><p>可簡寫成  <code>hexo cl</code> <br />\n 在每次儲存檔案前，建議先輸入此指令，清除快取檔案 -  <code>db.json</code>  和已產生的靜態檔 -  <code>public</code></p>\n<h2 id=\"generate-產生靜態檔案\"><a class=\"anchor\" href=\"#generate-產生靜態檔案\">#</a> generate 產生靜態檔案</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo generate</pre></td></tr></table></figure><p>可簡寫成  <code>hexo g</code>  生成靜態檔案</p>\n<h2 id=\"server-啟動本地伺服器\"><a class=\"anchor\" href=\"#server-啟動本地伺服器\">#</a> server 啟動本地伺服器</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo server</pre></td></tr></table></figure><p>可簡寫成  <code>hexo s</code></p>\n<ul>\n<li>在本地上啟用 Hexo 伺服器，預設 IP 為 :  <code>https://localhost:4000/</code></li>\n<li>可在本機上預覽設定結果，按 <ins>Ctrl + C</ins> 即可關閉伺服器</li>\n</ul>\n<blockquote>\n<p><strong>localhost</strong> : 只能從本地瀏覽此網站，不可外部瀏覽</p>\n</blockquote>\n<h2 id=\"deploy-部屬網站\"><a class=\"anchor\" href=\"#deploy-部屬網站\">#</a> deploy 部屬網站</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo deploy</pre></td></tr></table></figure><p>可簡寫成  <code>hexo d</code></p>\n<ul>\n<li>在進行部屬前要先產生靜態檔案，使用  <code>hexo generate</code>  或  <code>hexo g</code>  來產生靜態檔</li>\n<li>也可以使用  <code>hexo g -d</code>  來進行部屬時產生靜態檔</li>\n</ul>\n<h1 id=\"部屬至-github\"><a class=\"anchor\" href=\"#部屬至-github\">#</a> 🧠部屬至 Github</h1>\n<h2 id=\"建立-github-專案\"><a class=\"anchor\" href=\"#建立-github-專案\">#</a> 建立 Github 專案</h2>\n<p>在架設網站前，必須準備一個存放網站的空間，自行架設主機、選擇現有平台等... 例如：<ins>Github Pages</ins> 或 <ins>Heroku</ins> 等，本人以 Github 作為示範</p>\n<p>依照下列步驟即可在 Github 新增專案</p>\n<h3 id=\"step-1-註冊-github\"><a class=\"anchor\" href=\"#step-1-註冊-github\">#</a> Step 1 : 註冊 Github</h3>\n<p>首先我們必須註冊一個 <a href=\"https://github.com/\">Github</a> 帳號才能新增專案，並將往後的檔案發佈至專案上進行更新</p>\n<h3 id=\"step-2-新增-repository-專案\"><a class=\"anchor\" href=\"#step-2-新增-repository-專案\">#</a> Step 2 : 新增 Repository (專案)</h3>\n<p>點選 <ins>New</ins> 新增一個 Repo (專案)<br />\n<img loading=\"lazy\" data-src=\"https://i.imgur.com/EXTRUdq.png\" alt=\"new repo\" /></p>\n<h3 id=\"step-3-命名-repository-專案-名稱\"><a class=\"anchor\" href=\"#step-3-命名-repository-專案-名稱\">#</a> Step 3 : 命名 Repository (專案) 名稱</h3>\n<p>將專案名稱命名為  <code>username.github.io</code> ， <code>username</code>  要改成自己帳號的名稱<br />\n<img loading=\"lazy\" data-src=\"https://i.imgur.com/lCL8epT.png\" alt=\"repo name\" /><br />\n 完成後就成功建立一個新網域：  <code>username.github.io</code></p>\n<h2 id=\"發佈至-github-上\"><a class=\"anchor\" href=\"#發佈至-github-上\">#</a> 發佈至 Github 上</h2>\n<h3 id=\"step-1-安裝-hexo-git-套件\"><a class=\"anchor\" href=\"#step-1-安裝-hexo-git-套件\">#</a> Step 1 : 安裝 Hexo-Git 套件</h3>\n<div class=\"note info\">\n<p>Hexo 本身無預載一鍵部屬的功能，因此我們必須先安裝相關套件</p>\n</div>\n<p>開啟終端機，並輸入以下指令安裝部屬用的套件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><h3 id=\"step-2-修改-_configyml-的-deployment-設定\"><a class=\"anchor\" href=\"#step-2-修改-_configyml-的-deployment-設定\">#</a> Step 2 : 修改  <code>_config.yml</code>  的 <ins>Deployment</ins> 設定</h3>\n<p>安裝完畢後，開啟 Hexo 根目錄下的  <code>_config.yml</code>  增加 deploy 的設定</p>\n<blockquote>\n<p>這裡的  <code>_config.yml</code>  是位於  <code>hexo/_config.yml</code>  內，並非主題內的  <code>themes/_config.yml</code></p>\n</blockquote>\n<p>在尾端加入以下程式碼：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/username/username.github.io.git <span class=\"token comment\"># 將內文中的 username 改成你帳戶的名稱</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 或者是 main</span></pre></td></tr></table></figure><ul>\n<li>type : 選擇部屬模式，這裡選填 git</li>\n<li>repo : Github Repository 的連結，請記住：將  <code>username</code>  /  <code>username.github.io</code>  中的  <code>username</code>  改成你 Github 上帳戶名稱</li>\n<li>branch : 選擇分支，預設為  <code>master</code>  (或  <code>main</code> )</li>\n</ul>\n<h3 id=\"step-3-輸入部屬指令\"><a class=\"anchor\" href=\"#step-3-輸入部屬指令\">#</a> Step 3 : 輸入部屬指令</h3>\n<p>輸入指令進行部屬檔案至網站上，請依序輸入  <code>clean &gt; generate &gt; deploy</code>  這三行指令，避免更新不完全</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo cl </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo d</pre></td></tr></table></figure><blockquote>\n<p>也可先進行  <code>hexo clean</code>  後再用  <code>hexo g -d</code>  進行產生靜態網站並部屬<br />\n使用部屬指令時第一次可能會要求登入 Github 帳號</p>\n</blockquote>\n<p>這樣就能部屬你的 Hexo 網站到 Github 上了！可以在  <code>https://username.github.io</code>  確認是否發佈成功，若成功的話畫面如下：<br />\n<img loading=\"lazy\" data-src=\"https://i.imgur.com/qTk5RrV.jpeg\" alt=\"github page\" /></p>\n<h1 id=\"總結\"><a class=\"anchor\" href=\"#總結\">#</a> ☕總結</h1>\n<p>我之所以會想用 Hexo 的原因是因為現成的部落格網站很難進行高度客製化，而且自己的文章、SEO 及版面等，其實都掌握在那些部落格平台上，雖然也是可以使用前述的部落格平台，但主機、網域及 SEO 等其實都是那些平台掌控的。<br />\n其實以目前來講，截止  <code>2024/05/30</code>  為止，已經有不少以 Hexo 為原點出發的部落格網站，例如：</p>\n<ul>\n<li><a href=\"https://vitepress.dev/\">VitePress</a></li>\n<li><a href=\"https://vuepress.vuejs.org/zh/\">VuePress</a></li>\n<li><a href=\"https://nextjs.org/\">Next.js</a></li>\n<li>現今當紅炸子雞：<a href=\"https://astro.build/\">Astro</a></li>\n</ul>\n<p>但為何我終究選擇了 Hexo？有以下原因：</p>\n<ul>\n<li>教學多多，不怕看不懂或不會操作</li>\n<li>個人屬於輕度使用者，只有在記錄一些自學歷程或筆記時才會撰寫文案</li>\n<li>資源繁多，各式各樣極方便的套件很多都能查詢得到</li>\n<li>主題很豐富，每個主題都十分有趣或優美</li>\n</ul>\n<p>即便好處多多，但壞處也有嗎？是的，也有</p>\n<ul>\n<li>必須找存儲空間放置網站</li>\n<li>學習各種指令操作</li>\n<li>購買網域</li>\n<li>SEO 要自己想辦法</li>\n<li>主題要慎選（因為有些可能已經過期，或不符合現有的 Hexo 版本等...）</li>\n<li>以現今網頁開發來講過於過時，Hexo 於 2013 年亮相，那時候 Facebook 才剛宣布 React 框架，所以 Hexo 目前還是依賴  <code>Html</code> ,  <code>Css</code>  及  <code>JavaScript</code>  為主</li>\n</ul>\n<p>不過就算如此，我依然會選擇 Hexo 作為我的部落格首選之一，本人也很推薦初學者剛學自架部落格框架可以先以 Hexo 為主，之後在依照自己的要求遷移至其他框架也可。</p>\n<h1 id=\"️謝謝觀看\"><a class=\"anchor\" href=\"#️謝謝觀看\">#</a> ❤️謝謝觀看</h1>\n<blockquote>\n<p>黑甚於黑，暗之漆黑，渴求融合我之真紅吧！覺醒之時已然來臨，真理墜入無繆境界，化為無形扭曲，顯現吧！舞動吧，舞動吧，舞動吧！渴求我魔力狂潮的崩壞之力，無可比擬的崩壞之力，萬象化為灰塵，自深淵奔流而出，這正是人類威力最強攻擊手段，這就是終極的攻擊魔法，Explosion！</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"https://media1.tenor.com/m/yaQFeaLiPG4AAAAC/megumin-explosion.gif\" alt=\"Megumin\" /></p>\n",
            "tags": [
                "Hexo"
            ]
        }
    ]
}